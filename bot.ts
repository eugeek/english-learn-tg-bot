import { Bot, CommandContext, Context, GrammyError, HearsContext, HttpError, Keyboard, session, SessionFlavor } from "grammy";
import { PsqlAdapter } from '@grammyjs/storage-psql';
import { Client } from "pg";
import words from './words';
import dotenv from 'dotenv';
import { test } from "node:test";
dotenv.config();

interface SessionData {
  knownWords: {english: string, russian: string}[] 
  unknownWords: {english: string, russian: string}[]
  currentWord: {english: string, russian: string}
  testStarted: boolean
  testWords: {english: string, russian: string}[]
  testSteps: number
  user: {id: number, name: string}
}
type MyContext = Context & SessionFlavor<SessionData>;

const keys = Object.keys(words)

async function bootstrap() {
  const client = new Client(
    String(process.env.DATABASE_URL)
  );
  
  await client.connect();

  const bot = new Bot<MyContext>(String(process.env.BOT_TOKEN));
  bot.use(
    session({
      initial: () => ({ knownWords: [], unknownWords: [], currentWord: '', testStarted: false, testWords: [], testSteps: 0, user: {id: '', name: ''} }),
      storage: await PsqlAdapter.create({ tableName: 'sessions', client }),
    })
  );

  bot.command("start", async(ctx) => {
    const { from } = ctx.update.message as any;

    if (from) {
      ctx.session.user = {id: from.username || '', name: from.first_name || 'student'}
    }

    await ctx.replyWithPhoto('https://koteiki.com/wp-content/uploads/2019/05/011.jpg')
    await ctx.reply('–ü—Ä–∏–≤–µ—Ç! –ú–µ–Ω—è –∑–æ–≤—É—Ç –∫–æ—Ç –ê—Ä–Ω–æ–ª—å–¥, —è –∑–Ω–∞—é 3000 –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö —Å–ª–æ–≤! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –≤—ã—É—á–∏—Ç—å –∏—Ö! –•–æ—á–µ—à—å –Ω–∞—á–∞—Ç—å?üî•', {
      reply_markup: {
        inline_keyboard: [
          [{ text: '–£—á–∏—Ç—å —Å–ª–æ–≤–∞ üö¥üèº', callback_data: 'start' }],
        ],
      },
    })
  });

  bot.command('learn', async (ctx) => {
    sendNextWord(ctx);
  });
  
  bot.command('menu', (ctx) => {
    contextMenu(ctx);
  });

  bot.command('words', async (ctx) => {
    showUnknownWords(ctx);
  });

  bot.command('stop_test', async (ctx) => {
    ctx.session.testStarted = false;
    ctx.session.testSteps = 0;
    ctx.session.testWords = [];
    ctx.reply('–¢–µ—Å—Ç –æ–∫–æ–Ω—á–µ–Ω!\n\n–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ /menu')
  });

  bot.command('help', (ctx) => {
    const { name } = ctx.session.user;
    ctx.reply(`${name || ''}, –µ—Å–ª–∏ —É —Ç–µ–±—è –≤–æ–∑–Ω–∏–∫ –∫–∞–∫–æ–π-—Ç–æ –≤–æ–ø—Ä–æ—Å, —Ç–æ –º–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å –º–æ–µ–º—É *—Å–æ–∑–¥–∞—Ç–µ–ª—é*:\n\n@eugeek`, {
      reply_markup: {
        keyboard: [
          [{ text: '–ú–µ–Ω—é üõé' }],
        ],
        resize_keyboard: true,
      },
      parse_mode: 'MarkdownV2',
    });
  });

  bot.hears('–£—á–∏—Ç—å —Å–ª–æ–≤–∞ üö¥üèº', async (ctx) => {
    sendNextWord(ctx);
  });
  
  bot.hears('–ú–æ–∏ —Å–ª–æ–≤–∞ üßëüèº‚Äçüéì', (ctx) => {
    showUnknownWords(ctx);
  });

  bot.hears(['–ú–µ–Ω—é üõé', '–ú–µ–Ω—é', '–º–µ–Ω—é', 'Menu', 'menu'], async (ctx) => {
    contextMenu(ctx);
  });

  bot.hears('–ü–æ—á–µ–º—É –∏–º–µ–Ω–Ω–æ 3000 —Å–ª–æ–≤ üßê', async (ctx) => {
    const { name } = ctx.session.user;
    ctx.reply(`${name || '–ú–æ–π –¥—Ä—É–≥'}, –µ—Å–ª–∏ –≤—ã –±—É–¥–µ—Ç–µ –∑–Ω–∞—Ç—å –æ—Ç 2500 –¥–æ 3000 —Å–ª–æ–≤, —Ç–æ –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø–æ–Ω–∏–º–∞—Ç—å 90% –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω—ã—Ö —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤, –Ω–∞—É—á–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π, –∞ —Ç–∞–∫ –∂–µ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –Ω–∞ —Ä–∞–±–æ—á–µ–º –º–µ—Å—Ç–µ!\n\n–û—Å—Ç–∞–ª—å–Ω—ã–µ 10% –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–Ω–∏–º–∞—Ç—å –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞. –í–∞—à —Å–ª–æ–≤–∞—Ä–Ω—ã–π –∑–∞–ø–∞—Å —Å—Ç–∞–Ω–µ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º üò±ü§ó`, {
      reply_markup: {
        keyboard: [
          [{ text: '–ú–µ–Ω—é üõé' }],
        ],
        resize_keyboard: true,
      },
      parse_mode: 'Markdown',
    });
  });

  bot.hears('–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ê—Ä–Ω–æ–ª—å–¥–∞ üíµ', async (ctx) => {
    const { name } = ctx.session.user;
    ctx.reply(`${name || '–ú–æ–π –¥—Ä—É–≥'}, —Å–ø–∞—Å–∏–±–æ –í–∞–º –∑–∞ –≤–∞—à—É –ø–æ–¥–¥–µ—Ä–∂–∫—É!üëã\n\n–ù–µ —Ö–æ—Ç–µ–ª —Å–≤—è—Ç–∏—Ç—å —Å–≤–æ–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∑–¥–µ—Å—å üòú, –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞: @eugeek`, {
      reply_markup: {
        keyboard: [
          [{ text: '–ú–µ–Ω—é üõé' }],
        ],
        resize_keyboard: true,
      },
      parse_mode: 'Markdown',
    });
  });

  bot.hears('–ú–Ω–µ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å ü¶∏üèº‚Äç‚ôÇÔ∏è', async (ctx) => {
    const { name } = ctx.session.user;
    ctx.reply(`${name || ''}, –µ—Å–ª–∏ —É —Ç–µ–±—è –≤–æ–∑–Ω–∏–∫ –∫–∞–∫–æ–π-—Ç–æ –≤–æ–ø—Ä–æ—Å, —Ç–æ –º–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å –º–æ–µ–º—É *—Å–æ–∑–¥–∞—Ç–µ–ª—é*:\n\n@eugeek\n\nP.S. –∫–æ—Ç –ê—Ä–Ω–æ–ª—å–¥`, {
      reply_markup: {
        keyboard: [
          [{ text: '–ú–µ–Ω—é üõé' }],
        ],
        resize_keyboard: true,
      },
      parse_mode: 'Markdown',
    });
  });

  bot.callbackQuery("start", async (ctx) => {
    sendNextWord(ctx as HearsContext<MyContext>);
  });

  bot.callbackQuery("menu", async (ctx) => {
    contextMenu(ctx as HearsContext<MyContext>);
  });

  bot.callbackQuery("know_it", async (ctx) => {
    const userChoice = ctx.message?.text;
    const wordPair = ctx.session.currentWord;
    const { knownWords, unknownWords } = ctx.session;
    
    await ctx.deleteMessage();

    if (!knownWords.some(word => word.english === wordPair.english)) knownWords.push(wordPair)
    if(unknownWords.some(word => word.english === wordPair.english)) unknownWords.splice(unknownWords.findIndex(word => word.english === wordPair.english), 1);
    
    const message = `–ú–æ–ª–æ–¥–µ—Ü! –ü—Ä–æ–≤–µ—Ä—å:\n\n${wordPair.english} - __*${wordPair.russian}*__\n\n–°–ª–µ–¥—É—é—â–µ–µ —Å–ª–æ–≤–æ:`;

    await ctx.reply(message, {parse_mode: 'Markdown'});

    sendNextWord(ctx as HearsContext<MyContext>);
  });

  bot.callbackQuery("dont_know_it", async (ctx) => {
    const wordPair = ctx.session.currentWord;
    const { unknownWords } = ctx.session;
    
    await ctx.deleteMessage();

    if (!unknownWords.some(word => word.english === wordPair.english)) unknownWords.push(wordPair)
    
    const message = `–ë—ã–≤–∞–µ—Ç, —Ç—ã –º–æ–∂–µ—à—å –≤—ã—É—á–∏—Ç—å –µ–≥–æ –≤ /words\n\n${wordPair.english} –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—Å—è –∫–∞–∫ __*${wordPair.russian}*__\n\n–°–ª–µ–¥—É—é—â–µ–µ —Å–ª–æ–≤–æ:`;

    await ctx.reply(message, {parse_mode: 'MarkdownV2'});
    
    sendNextWord(ctx as HearsContext<MyContext>);
  });

  bot.callbackQuery("test_right", async (ctx) => {
    const wordPair = ctx.session.currentWord;
    const {knownWords, unknownWords, testStarted, testSteps, testWords} = ctx.session;
    
    await ctx.deleteMessage();
    
    if(testStarted) ctx.session.testSteps++;
    if (!knownWords.some(word => word.english === wordPair.english)) knownWords.push(wordPair)
    if(unknownWords.some(word => word.english === wordPair.english)) unknownWords.splice(unknownWords.findIndex(word => word.english === wordPair.english), 1);
    
    const message = `–í–µ—Ä–Ω–æ, –ú–æ–ª–æ–¥–µ—Ü!\n–Ø —É–±—Ä–∞–ª –µ–≥–æ –∏–∑ /words!\n\n–°–ª–µ–¥—É—é—â–µ–µ —Å–ª–æ–≤–æ:`;

    await ctx.reply(message, {parse_mode: 'Markdown'});

    sendTestWord(ctx as HearsContext<MyContext>);
  });

  bot.callbackQuery("test_wrong", async (ctx) => {
    const wordPair = ctx.session.currentWord;
    const { unknownWords, testWords, testStarted, testSteps } = ctx.session;
    
    await ctx.deleteMessage();
    
    if(testStarted) ctx.session.testSteps++;
    if (!unknownWords.some(word => word.english === wordPair.english)) unknownWords.push(wordPair)
    
    const message = `–ù–∞ —Å–∞–º–æ–º –¥–µ–ª–µ ${wordPair.english} –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—Å—è –∫–∞–∫ __*${wordPair.russian}*__\n\n–≠—Ç–æ —Å–ª–æ–≤–æ –æ—Å—Ç–∞–µ—Ç—Å—è –≤ /words\n\n–°–ª–µ–¥—É—é—â–µ–µ —Å–ª–æ–≤–æ`;

    await ctx.reply(message, {parse_mode: 'MarkdownV2'});
    
    sendTestWord(ctx as HearsContext<MyContext>);
  });


  bot.callbackQuery("test", async (ctx) => {
    const { unknownWords, testStarted } = ctx.session;
    
    await ctx.deleteMessage();

    if (testStarted || unknownWords.length < 10) return ctx.reply('–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å —Ç–µ—Å—Ç!\n\n–í—ã —É–∂–µ –Ω–∞—á–∞–ª–∏ —Ç–µ—Å—Ç –∏–ª–∏ —É –≤–∞—Å –º–µ–Ω—å—à–µ 10 —Å–ª–æ–≤ –≤ /words');
    
    ctx.session.testStarted = true;
    ctx.session.testSteps = 0;
    ctx.session.testWords = unknownWords.slice(0,10).sort(() => Math.random() - 0.5);
    
    await ctx.reply(`–≠—Ç–æ—Ç —Ç–µ—Å—Ç –±—É–¥–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å 10 –≤–æ–ø—Ä–æ—Å–æ–≤\n\n–ù–∞–¥–µ—é—Å—å —Ç—ã –≤—ã—É—á–∏–ª —ç—Ç–∏ —Å–ª–æ–≤–∞ =)\n\n–£ —Ç–µ–±—è –≤—Å–µ –ø–æ–ª—É—á–∏—Ç—Å—è!`, {parse_mode: 'Markdown'});
    
    sendTestWord(ctx as HearsContext<MyContext>);
  });

  function showUnknownWords(ctx: HearsContext<MyContext> | CommandContext<MyContext>) {
    const { unknownWords } = ctx.session;
    const words = unknownWords.slice(0,10).map(word => `_${word.english}_ - ${word.russian}`).join('\n\n');

    const message = unknownWords.length >= 10 ? `–£ —Ç–µ–±—è *${unknownWords.length}* –Ω–µ–≤—ã—É—á–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤, —è –ø–æ–∫–∞–∂—É —Ç–µ–±–µ 10 –∏–∑ –Ω–∏—Ö.\n\n–¢—ã –º–æ–∂–µ—à—å –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –∏ —É–±—Ä–∞—Ç—å –≤—ã—É—á–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ –æ—Ç—Å—é–¥–∞ =)\n\n` : 
    `–£ —Ç–µ–±—è *${unknownWords.length}* –Ω–µ–≤—ã—É—á–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤\n\n–ö–æ–≥–¥–∞ –Ω–∞–±–µ—Ä–µ—Ç—Å—è —Ö–æ—Ç—è –±—ã 10 —Å–ª–æ–≤, —Ç—ã —Å–º–æ–∂–µ—à—å –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –∏ —É–±—Ä–∞—Ç—å –∏—Ö –æ—Ç—Å—é–¥–∞ =)\n\n`
    ctx.reply(`${message}${words}`, {parse_mode: 'Markdown', reply_markup: {
      inline_keyboard: [
        [
          {'text': '–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –ø–æ —ç—Ç–∏–º —Å–ª–æ–≤–∞–º', 'callback_data': 'test'}, 
        ],
      ],
      resize_keyboard: true,
    }});
  }

  function contextMenu(ctx: HearsContext<MyContext> | CommandContext<MyContext>) {
    const { name } = ctx.session.user;
    const { knownWords } = ctx.session;

    ctx.reply(`${name || ''}, —Ç—ã —É–∂–µ –∑–Ω–∞–µ—à—å __${knownWords.length}__ —Å–ª–æ–≤ üéâ`, {
      reply_markup: {
        keyboard: [
          [{ text: '–£—á–∏—Ç—å —Å–ª–æ–≤–∞ üö¥üèº' }],
          [{ text: '–ú–æ–∏ —Å–ª–æ–≤–∞ üßëüèº‚Äçüéì' }],
          [{ text: '–ü–æ—á–µ–º—É –∏–º–µ–Ω–Ω–æ 3000 —Å–ª–æ–≤ üßê' }],
          [{ text: '–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ê—Ä–Ω–æ–ª—å–¥–∞ üíµ' }],
          [{ text: '–ú–Ω–µ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å ü¶∏üèº‚Äç‚ôÇÔ∏è' }],
        ],
        resize_keyboard: true,
      },
      parse_mode: 'MarkdownV2',
    });
  }
  
  function sendNextWord(ctx: HearsContext<MyContext> | CommandContext<MyContext>) {
    const { knownWords, unknownWords, testStarted } = ctx.session;

    if (testStarted) return ctx.reply('–í—ã –µ—â–µ –Ω–µ –∑–∞–∫–æ–Ω—á–∏–ª–∏ —Ç–µ—Å—Ç!\n\n–í—ã –º–æ–∂–µ—Ç–µ —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å –∫–æ–º–∞–Ω–¥–æ–π\n/stop_test')

    const filteredKeys = keys.filter(key => !knownWords.some(word => word.english === key));
    if(filteredKeys.length === 0) return ctx.reply('–¢—ã –≤—ã—É—á–∏–ª –≤—Å–µ —Å–ª–æ–≤–∞! –ü–æ–∑–¥—Ä–∞–≤–ª—è—é =)');
    const wordPair = words[filteredKeys[Math.floor(Math.random() * filteredKeys.length)]];
    ctx.session.currentWord = wordPair;

    ctx.reply(`–¢—ã –∑–Ω–∞–µ—à—å –∫–∞–∫ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ __*${wordPair.english}*__?`, {
      reply_markup: {
        inline_keyboard: [
            [{ text: '–ó–Ω–∞—é ‚úÖ', callback_data: 'know_it' }, { text: '–ü–æ–∫–∞ –Ω–µ –∑–Ω–∞—é üÜò', callback_data: 'dont_know_it' }],
            [{ text: '–ú–µ–Ω—é üõé', callback_data: 'menu' }],
        ],
      },
      parse_mode: 'MarkdownV2'
    });
  }

  function sendTestWord(ctx: HearsContext<MyContext> | CommandContext<MyContext>) {
    const { testWords, testSteps } = ctx.session;

    if(testSteps > 9) {
      ctx.session.testStarted = false;
      ctx.session.testSteps = 0;
      ctx.session.testWords = [];
      return ctx.reply('–¢–µ—Å—Ç –æ–∫–æ–Ω—á–µ–Ω!\n\n–¢—ã –º–æ–∂–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ª–æ–≤–∞ –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã –Ω–µ –∑–Ω–∞–ª –≤ /words');
    }

    const wordPair = testWords[testSteps];
    ctx.session.currentWord = wordPair;

    const wrongWordPairs = testWords
      .filter(word => word.english !== wordPair.english).slice(0,3)
      .map(word => ({text: word.russian, callback_data: 'test_wrong'}));
    const answers = [{text: wordPair.russian, callback_data: 'test_right'}, ...wrongWordPairs].sort(() => Math.random() - 0.5);

    ctx.reply(`[${testSteps+1}/10] –ö–∞–∫ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—Å—è __*${wordPair.english}*__?`, {
      reply_markup: {
        inline_keyboard: [
            [answers[0]],
            [answers[1]],
            [answers[2]],
            [answers[3]]
        ],
      },
      parse_mode: 'MarkdownV2'
    });
  }

  bot.catch((err) => {
    const ctx = err.ctx;
    console.error(`Error while handling update ${ctx.update.update_id}:`);
    const e = err.error;
    if (e instanceof GrammyError) {
      console.error("Error in request:", e.description);
    } else if (e instanceof HttpError) {
      console.error("Could not contact Telegram:", e);
    } else {
      console.error("Unknown error:", e);
    }
  });
  
  bot.start();
}

bootstrap()