import { Bot, CommandContext, Context, GrammyError, HearsContext, HttpError, Keyboard, session, SessionFlavor } from "grammy";
import { PsqlAdapter } from '@grammyjs/storage-psql';
import { Client } from "pg";
import words from './words';
import dotenv from 'dotenv';
dotenv.config();

interface SessionData {
  knownWords: {english: string, russian: string}[] 
  unknownWords: {english: string, russian: string}[]
  currentWord: {english: string, russian: string}
  user: {id: number, name: string}
}
type MyContext = Context & SessionFlavor<SessionData>;

const keys = Object.keys(words)

async function bootstrap() {
  const client = new Client(
    String(process.env.DATABASE_URL)
  );
  
  await client.connect();

  const bot = new Bot<MyContext>(String(process.env.BOT_TOKEN));
  bot.use(
    session({
      initial: () => ({ knownWords: [], unknownWords: [], currentWord: ''  }),
      storage: await PsqlAdapter.create({ tableName: 'sessions', client }),
    })
  );

  bot.command("start", async(ctx) => {
    const { from } = ctx.update.message as any;

    if (from) {
      ctx.session.user = {id: from.username || '', name: from.first_name || 'student'}
    }

    await ctx.replyWithPhoto('https://koteiki.com/wp-content/uploads/2019/05/011.jpg')
    await ctx.reply('–ü—Ä–∏–≤–µ—Ç! –ú–µ–Ω—è –∑–æ–≤—É—Ç –∫–æ—Ç –ê—Ä–Ω–æ–ª—å–¥, —è –∑–Ω–∞—é 3000 –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö —Å–ª–æ–≤! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –≤—ã—É—á–∏—Ç—å –∏—Ö! –•–æ—á–µ—à—å –Ω–∞—á–∞—Ç—å?üî•', {
      reply_markup: {
        keyboard: [
          [{ text: '–£—á–∏—Ç—å —Å–ª–æ–≤–∞ üßëüèæ‚Äçüéì' }],
        ],
        resize_keyboard: true,
      },
    })
  });

  bot.command('learn', async (ctx) => {
    sendNextWord(ctx);
  });
  
  bot.command('menu', (ctx) => {
    const { name } = ctx.session.user;
    const { knownWords, unknownWords } = ctx.session;
    const word = knownWords.length === 1 ? '—Å–ª–æ–≤–æ' : knownWords.length > 1 && knownWords.length < 5 ? '—Å–ª–æ–≤–∞' : '—Å–ª–æ–≤';
    ctx.reply(`${name || ''}, —Ç—ã —É–∂–µ –∑–Ω–∞–µ—à—å __${knownWords.length}__ ${word} üéâ`, {
      reply_markup: {
        keyboard: [
          [{ text: '–£—á–∏—Ç—å —Å–ª–æ–≤–∞ üßëüèæ‚Äçüéì' }],
          [{ text: '–°–ª–æ–≤–∞ –∫–æ—Ç–æ—Ä—ã–µ —è –ø–æ–∫–∞ –Ω–µ –∑–Ω–∞—é üêº' }],
          [{ text: '–ú–Ω–µ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å üßë‚Äçüöí' }],
        ],
        resize_keyboard: true,
      },
      parse_mode: 'MarkdownV2',
    });
  });

  bot.command('words', async (ctx) => {
    const {unknownWords} = ctx.session;
    ctx.reply(`–í–æ—Ç —Ç–µ–±–µ 10 —Å–ª–æ–≤, –ø–æ—Å—Ç–∞—Ä–∞–π—Å—è –∑–∞–ø–æ–º–Ω–∏—Ç—å –∏—Ö\n–Ø –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å–ø—Ä–æ—à—É –∏—Ö –µ—â–µ —Ä–∞–∑ :)\n\n${unknownWords.slice(0,10).map(word => `_${word.english}_ - ${word.russian}`).join('\n\n')}`, {parse_mode: 'Markdown', reply_markup: {
      keyboard: [
        [{ text: '–£—á–∏—Ç—å —Å–ª–æ–≤–∞ üßëüèæ‚Äçüéì' }],
      ],
      resize_keyboard: true,
    }});
  });

  bot.command('help', (ctx) => {
    const { name } = ctx.session.user;
    ctx.reply(`${name || ''}, –µ—Å–ª–∏ —É —Ç–µ–±—è –≤–æ–∑–Ω–∏–∫ –∫–∞–∫–æ–π-—Ç–æ –≤–æ–ø—Ä–æ—Å, —Ç–æ –º–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å –º–æ–µ–º—É *—Å–æ–∑–¥–∞—Ç–µ–ª—é*:\n\n@eugeek`, {
      reply_markup: {
        keyboard: [
          [{ text: '–ú–µ–Ω—é üõé' }],
        ],
        resize_keyboard: true,
      },
      parse_mode: 'MarkdownV2',
    });
  });

  bot.hears('–£—á–∏—Ç—å —Å–ª–æ–≤–∞ üßëüèæ‚Äçüéì', async (ctx) => {
    sendNextWord(ctx);
  });
  
  bot.hears('–°–ª–æ–≤–∞ –∫–æ—Ç–æ—Ä—ã–µ —è –ø–æ–∫–∞ –Ω–µ –∑–Ω–∞—é üêº', (ctx) => {
    const { unknownWords } = ctx.session;
    ctx.reply(`–í–æ—Ç —Ç–µ–±–µ 10 —Å–ª–æ–≤, –ø–æ—Å—Ç–∞—Ä–∞–π—Å—è –∑–∞–ø–æ–º–Ω–∏—Ç—å –∏—Ö\n–Ø –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å–ø—Ä–æ—à—É –∏—Ö –µ—â–µ —Ä–∞–∑ :)\n\n${unknownWords.slice(0,10).map(word => `_${word.english}_ - ${word.russian}`).join('\n\n')}`, {parse_mode: 'Markdown', reply_markup: {
      keyboard: [
        [{ text: '–£—á–∏—Ç—å —Å–ª–æ–≤–∞ üßëüèæ‚Äçüéì' }],
      ],
      resize_keyboard: true,
    }});
  });

  bot.hears('–ú–µ–Ω—é üõé', async (ctx) => {
    const { name } = ctx.session.user;
    const { knownWords, unknownWords } = ctx.session;
    const word = knownWords.length === 1 ? '—Å–ª–æ–≤–æ' : knownWords.length > 1 && knownWords.length < 5 ? '—Å–ª–æ–≤–∞' : '—Å–ª–æ–≤';
    ctx.reply(`${name || ''}, —Ç—ã —É–∂–µ –∑–Ω–∞–µ—à—å __${knownWords.length}__ ${word} üéâ`, {
      reply_markup: {
        keyboard: [
          [{ text: '–£—á–∏—Ç—å —Å–ª–æ–≤–∞ üßëüèæ‚Äçüéì' }],
          [{ text: '–°–ª–æ–≤–∞ –∫–æ—Ç–æ—Ä—ã–µ —è –ø–æ–∫–∞ –Ω–µ –∑–Ω–∞—é üêº' }],
          [{ text: '–ú–Ω–µ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å üßë‚Äçüöí' }],
        ],
        resize_keyboard: true,
      },
      parse_mode: 'MarkdownV2',
    });
  });

  bot.hears(['–ó–Ω–∞—é ‚≠êÔ∏è', '–ü–æ–∫–∞ –Ω–µ –∑–Ω–∞—é üçÄ'], async (ctx) => {
    const userChoice = ctx.message?.text;
    const wordPair = ctx.session.currentWord;
    const {knownWords, unknownWords} = ctx.session;

    if (userChoice === '–ó–Ω–∞—é ‚≠êÔ∏è') {
      if (!knownWords.some(word => word.english === wordPair.english)) knownWords.push(wordPair)

      if(unknownWords.some(word => word.english === wordPair.english)) unknownWords.splice(unknownWords.findIndex(word => word.english === wordPair.english), 1);

      await ctx.reply(`–°—É–ø–µ—Ä!\n\n${wordPair.english} - __*${wordPair.russian}*__\n\n–¢–≤–æ–µ —Å–ª–µ–¥—É—é—â–µ–µ —Å–ª–æ–≤–æ:`, {parse_mode: 'Markdown'});
    } else if (userChoice === '–ü–æ–∫–∞ –Ω–µ –∑–Ω–∞—é üçÄ') {
      if (!unknownWords.some(word => word.english === wordPair.english)) unknownWords.push(wordPair)
      await ctx.reply(`${wordPair.english} –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—Å—è –∫–∞–∫ __*${wordPair.russian}*__\n\n–Ø –∑–∞–ø–æ–º–Ω—é –µ–≥–æ –¥–ª—è —Ç–µ–±—è –∑–¥–µ—Å—å /words\n–¢–≤–æ–µ —Å–ª–µ–¥—É—é—â–µ–µ —Å–ª–æ–≤–æ:`, {parse_mode: 'MarkdownV2'});
    }

    sendNextWord(ctx)
  });

  bot.hears('–ú–Ω–µ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å üßë‚Äçüöí', async (ctx) => {
    const { name } = ctx.session.user;
    ctx.reply(`${name || ''}, –µ—Å–ª–∏ —É —Ç–µ–±—è –≤–æ–∑–Ω–∏–∫ –∫–∞–∫–æ–π-—Ç–æ –≤–æ–ø—Ä–æ—Å, —Ç–æ –º–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å –º–æ–µ–º—É *—Å–æ–∑–¥–∞—Ç–µ–ª—é*:\n\n@eugeek\n\nP.S. –∫–æ—Ç –ê—Ä–Ω–æ–ª—å–¥`, {
      reply_markup: {
        keyboard: [
          [{ text: '–ú–µ–Ω—é üõé' }],
        ],
        resize_keyboard: true,
      },
      parse_mode: 'Markdown',
    });
  });
  
  function sendNextWord(ctx: HearsContext<MyContext> | CommandContext<MyContext>) {
    const { knownWords } = ctx.session;
    const filteredKeys = keys.filter(key => !knownWords.some(word => word.english === key));

    if(filteredKeys.length === 0) return ctx.reply('–¢—ã –≤—ã—É—á–∏–ª –≤—Å–µ —Å–ª–æ–≤–∞! –ü–æ–∑–¥—Ä–∞–≤–ª—è—é =)');

    const wordPair = words[filteredKeys[Math.floor(Math.random() * filteredKeys.length)]];
    ctx.session.currentWord = wordPair;

    ctx.reply(`–¢—ã –∑–Ω–∞–µ—à—å –∫–∞–∫ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ __*${wordPair.english}*__?`, {
        reply_markup: {
            keyboard: [
                [{ text: '–ó–Ω–∞—é ‚≠êÔ∏è' }, { text: '–ü–æ–∫–∞ –Ω–µ –∑–Ω–∞—é üçÄ' }],
                [{ text: '–ú–µ–Ω—é üõé' }]
            ],
            resize_keyboard: true,
        },
        parse_mode: 'MarkdownV2'
    });
  }

  bot.catch((err) => {
    const ctx = err.ctx;
    console.error(`Error while handling update ${ctx.update.update_id}:`);
    const e = err.error;
    if (e instanceof GrammyError) {
      console.error("Error in request:", e.description);
    } else if (e instanceof HttpError) {
      console.error("Could not contact Telegram:", e);
    } else {
      console.error("Unknown error:", e);
    }
  });
  
  bot.start();
}

bootstrap()